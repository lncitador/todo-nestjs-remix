generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "../../zod/schemas"
  imports       = "../../zod/helpers"
  relationModel = false
  modelCase     = "PascalCase"
  modelSuffix   = "Schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  name            String
  Roles           Roles?   @relation(fields: [rolesId], references: [id])
  rolesId         String?  @map("roles_id")
  rememberMeToken String?  @map("remember_me_token")
  password        String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  UsersPermissions UsersPermissions[]
  AuthToken        AuthToken[]

  @@map("users")
}

model Roles {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  RolePermission PermissionRoles[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  RolePermission   PermissionRoles[]
  UsersPermissions UsersPermissions[]

  @@map("permissions")
}

model PermissionRoles {
  id           Int        @id @default(autoincrement())
  Roles        Roles      @relation(fields: [rolesId], references: [id])
  rolesId      String     @map("roles_id")
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("role_permissions")
}

model UsersPermissions {
  id           Int        @id @default(autoincrement())
  Users        User       @relation(fields: [usersId], references: [id])
  usersId      String     @map("users_id")
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("user_permissions")
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  Users     User     @relation(fields: [usersId], references: [id])
  usersId   String   @map("users_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("auth_tokens")
}
